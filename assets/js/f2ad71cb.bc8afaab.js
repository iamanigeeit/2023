"use strict";(self.webpackChunksite_docusaurus_template=self.webpackChunksite_docusaurus_template||[]).push([[579],{77612:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>h,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"sorting-algorithms/bubble-sort","title":"Bubble Sort","description":"Bubble sort is a simple comparison-based sorting algorithm that repeatedly swaps adjacent elements until the list is sorted.","source":"@site/docs/01-sorting-algorithms/bubble-sort.md","sourceDirName":"01-sorting-algorithms","slug":"/sorting-algorithms/bubble-sort","permalink":"/DDW2023/notes/sorting-algorithms/bubble-sort","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Week 1: Sorting Algorithms","permalink":"/DDW2023/notes/category/week-1-sorting-algorithms"},"next":{"title":"Insertion Sort","permalink":"/DDW2023/notes/sorting-algorithms/insertion-sort"}}');var t=n(74848),r=n(28453),a=(n(28548),n(13358)),l=n(53833);const o={sidebar_position:1},h="Bubble Sort",c={},d=[{value:"Goals",id:"goals",level:3},{value:"A Note about Show Pseudocode Button",id:"a-note-about-show-pseudocode-button",level:3},{value:"Bubble Sort",id:"bubble-sort-1",level:2},{value:"Problem Statement",id:"problem-statement",level:3},{value:"Test Case",id:"test-case",level:3},{value:"Design of Algorithm",id:"design-of-algorithm",level:3},{value:"Optimised Bubble Sort",id:"optimised-bubble-sort",level:2},{value:"Bubble Sort v2",id:"bubble-sort-v2",level:3},{value:"Comparison with v1",id:"comparison-with-v1",level:3},{value:"Bubble Sort v3",id:"bubble-sort-v3",level:3},{value:"Bubble Sort v4",id:"bubble-sort-v4",level:3}];function m(e){const s={a:"a",admonition:"admonition",annotation:"annotation",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",math:"math",mi:"mi",mn:"mn",mo:"mo",mrow:"mrow",ol:"ol",p:"p",pre:"pre",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"bubble-sort",children:"Bubble Sort"})}),"\n",(0,t.jsx)(l.A,{}),"\n",(0,t.jsx)(s.p,{children:"Bubble sort is a simple comparison-based sorting algorithm that repeatedly swaps adjacent elements until the list is sorted."}),"\n",(0,t.jsx)(s.h3,{id:"goals",children:"Goals"}),"\n",(0,t.jsx)(s.p,{children:"By the end of this lesson, you should be able to:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Describe ",(0,t.jsx)(s.strong,{children:"bubble sort"})," algorithm and ways to optimise it."]}),"\n",(0,t.jsxs)(s.li,{children:["Implement bubble sort algorithm to ",(0,t.jsx)(s.strong,{children:"sort"})," a sequence of number."]}),"\n"]}),"\n",(0,t.jsx)(s.admonition,{title:"Keywords",type:"keyword",children:(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"sorting"}),", ",(0,t.jsx)(s.code,{children:"bubble sort"})]})}),"\n",(0,t.jsx)(s.p,{children:"The best way to practice your programming skills is by writing actual code. One of the common computation is to sort some items in some way. For example, sorting a number from smallest to biggest or names from A to Z. In this notebook, we will describe some sorting algorithms which you can implement in Python."}),"\n",(0,t.jsx)(s.h3,{id:"a-note-about-show-pseudocode-button",children:"A Note about Show Pseudocode Button"}),"\n",(0,t.jsxs)(s.p,{children:["Throughout these notes, you will see a button that says ",(0,t.jsx)(s.strong,{children:"Show Pseudocode"})," as shown below. Go ahead and click it."]}),"\n",(0,t.jsxs)(a.A,{title:"Show Pseudocode",children:[(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"Steps:\n1. Do this\n2. Then do that\n"})}),(0,t.jsxs)(s.p,{children:["The purpose of this button is to show you the pseudocode of the algorithm. But more importantly, the button is placed there so that you ",(0,t.jsx)(s.strong,{children:"don't immediately"})," see the pseudocode. The purpose is for you to ",(0,t.jsx)(s.strong,{children:"write down your own pseudocode"})," and compare your pseudocode with what is provided in these notes."]})]}),"\n",(0,t.jsxs)(s.p,{children:["Another thing about pseudocode is that it is ",(0,t.jsx)("span",{style:{color:"red",fontWeight:"bold"},children:"not"})," a Python code."]}),"\n",(0,t.jsx)(s.admonition,{title:"Pseudocode \u2260 Code",type:"warning",children:(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Do not copy and paste the pseudocode"})," into any Python interpreter or Jupyter notebook cell and expect it to work. There is a good reason why it is called ",(0,t.jsx)(s.em,{children:"pseudocode"})," and not ",(0,t.jsx)(s.em,{children:"pythoncode"}),". See ",(0,t.jsx)(s.a,{href:"https://www.google.com/search?client=opera&q=define%3A+pseudo&sourceid=opera&ie=UTF-8&oe=UTF-8",children:"definition of pseudo"}),"."]})}),"\n",(0,t.jsx)(s.h2,{id:"bubble-sort-1",children:"Bubble Sort"}),"\n",(0,t.jsxs)(s.p,{children:["Bubble sort is one of the simplest sorting algorithms. We will be following the PCDIT framework (",(0,t.jsx)(s.strong,{children:"P"}),"roblem statement, Test ",(0,t.jsx)(s.strong,{children:"C"}),"ases, ",(0,t.jsx)(s.strong,{children:"D"}),"esign of Algorithm, ",(0,t.jsx)(s.strong,{children:"I"}),"mplementation, and ",(0,t.jsx)(s.strong,{children:"T"}),"esting) in describing the steps of these algorithms."]}),"\n",(0,t.jsx)(s.h3,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,t.jsx)(s.p,{children:"The problem is specified as follows. Given a sequence of numbers, write some steps to sort the sequence in some order. Usually, we will sort the sequence from the smallest to the largest."}),"\n",(0,t.jsx)(s.h3,{id:"test-case",children:"Test Case"}),"\n",(0,t.jsx)(s.p,{children:"For example, given the following input:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"# Python Code\nnumbers = [16, 14, 10, 8, 7, 8, 3, 2, 4, 1]\n"})}),"\n",(0,t.jsx)(s.p,{children:"We want to write some steps that sort the numbers, such that the output will be:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"[1, 2, 3, 4, 7, 8, 8, 10, 14, 16]\n"})}),"\n",(0,t.jsx)(s.p,{children:"We can intuitively try to sort the numbers by comparing two numbers (a pair) at a time. If the order is incorrect, we will swap the two numbers. Let's illustrate the steps!"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"We start from the input:"}),"\n",(0,t.jsxs)(s.p,{children:["[",(0,t.jsx)(s.strong,{children:"16, 14"}),", 10, 8, 7, 8, 3, 2, 4, 1]"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:["We compare the first two numbers (16, 14), i.e. ",(0,t.jsx)(s.strong,{children:"positions 0 and 1"})," in the list. Since 16 is bigger than 14, we will swap them."]}),"\n",(0,t.jsxs)(s.p,{children:["[",(0,t.jsx)(s.strong,{children:"14, 16"}),", 10, 8, 7, 8, 3, 2, 4, 1]"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:["Now we move to the next pair (16, 10), i.e. ",(0,t.jsx)(s.strong,{children:"positions 1 and 2"})," in the list. Since 16 is bigger than 10, we will swap them again."]}),"\n",(0,t.jsxs)(s.p,{children:["[14, ",(0,t.jsx)(s.strong,{children:"16, 10"}),", 8, 7, 8, 3, 2, 4, 1]"]}),"\n",(0,t.jsxs)(s.p,{children:["[14, ",(0,t.jsx)(s.strong,{children:"10, 16"}),", 8, 7, 8, 3, 2, 4, 1]"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:["And next pair (16, 8), i.e. ",(0,t.jsx)(s.strong,{children:"positions 2 and 3"}),". Since 16 is bigger than 8, we will swap."]}),"\n",(0,t.jsxs)(s.p,{children:["[14, 10, ",(0,t.jsx)(s.strong,{children:"16, 8"}),", 7, 8, 3, 2, 4, 1]"]}),"\n",(0,t.jsxs)(s.p,{children:["[14, 10, ",(0,t.jsx)(s.strong,{children:"8, 16"}),", 7, 8, 3, 2, 4, 1]"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsx)(s.p,{children:"We continue until 16 reaches the last position."}),"\n",(0,t.jsxs)(s.p,{children:["[14, 10, 8, ",(0,t.jsx)(s.strong,{children:"16, 7"}),", 8, 3, 2, 4, 1]"]}),"\n",(0,t.jsxs)(s.p,{children:["[14, 10, 8, ",(0,t.jsx)(s.strong,{children:"7, 16"}),", 8, 3, 2, 4, 1]"]}),"\n",(0,t.jsx)(s.p,{children:"--"}),"\n",(0,t.jsxs)(s.p,{children:["[14, 10, 8, 7, ",(0,t.jsx)(s.strong,{children:"16, 8"}),", 3, 2, 4, 1]"]}),"\n",(0,t.jsxs)(s.p,{children:["[14, 10, 8, 7, ",(0,t.jsx)(s.strong,{children:"8, 16"}),", 3, 2, 4, 1]"]}),"\n",(0,t.jsx)(s.p,{children:"--"}),"\n",(0,t.jsxs)(s.p,{children:["[14, 10, 8, 7, 8, ",(0,t.jsx)(s.strong,{children:"16, 3"}),", 2, 4, 1]"]}),"\n",(0,t.jsxs)(s.p,{children:["[14, 10, 8, 7, 8, ",(0,t.jsx)(s.strong,{children:"3, 16"}),", 2, 4, 1]"]}),"\n",(0,t.jsx)(s.p,{children:"--"}),"\n",(0,t.jsxs)(s.p,{children:["[14, 10, 8, 7, 8, 3, ",(0,t.jsx)(s.strong,{children:"16, 2"}),", 4, 1]"]}),"\n",(0,t.jsxs)(s.p,{children:["[14, 10, 8, 7, 8, 3, ",(0,t.jsx)(s.strong,{children:"2, 16"}),", 4, 1]"]}),"\n",(0,t.jsx)(s.p,{children:"--"}),"\n",(0,t.jsxs)(s.p,{children:["[14, 10, 8, 7, 8, 3, 2, ",(0,t.jsx)(s.strong,{children:"16, 4"}),", 1]"]}),"\n",(0,t.jsxs)(s.p,{children:["[14, 10, 8, 7, 8, 3, 2, ",(0,t.jsx)(s.strong,{children:"4, 16"}),", 1]"]}),"\n",(0,t.jsx)(s.p,{children:"--"}),"\n",(0,t.jsxs)(s.p,{children:["[14, 10, 8, 7, 8, 3, 2, 4, ",(0,t.jsx)(s.strong,{children:"16, 1"}),"]"]}),"\n",(0,t.jsxs)(s.p,{children:["[14, 10, 8, 7, 8, 3, 2, 4, ",(0,t.jsx)(s.strong,{children:"1, 16"}),"]"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["So now the largest number has occupied its place in the last position. But the other numbers are still not in the right order. Therefore, we have to repeat the steps starting from the beginning again. We start from the pair (14, 10). This will repeat the ",(0,t.jsx)(s.strong,{children:"pair-wise"})," comparison and move 14 to the second last position. Similarly, we can see how 10 and 8 will reach their final position. Here, we no longer show the pair-wise comparison and swapping for brevity."]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["[10, 8, 7, 8, 3, 2, 4, 1, ",(0,t.jsx)(s.strong,{children:"14, 16"}),"]"]}),"\n",(0,t.jsxs)(s.li,{children:["[8, 7, 8, 3, 2, 4, 1, ",(0,t.jsx)(s.strong,{children:"10, 14, 16"}),"]"]}),"\n",(0,t.jsxs)(s.li,{children:["[7, 8, 3, 2, 4, 1, ",(0,t.jsx)(s.strong,{children:"8, 10, 14, 16"}),"]"]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["At this point, we will start comparing the pair (7, 8). ",(0,t.jsx)(s.strong,{children:"But since 7 is not greater than 8, there is no swap"}),"."]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["[",(0,t.jsx)(s.strong,{children:"7, 8"}),", 3, 2, 4, 1, ",(0,t.jsx)(s.strong,{children:"8, 10, 14, 16"}),"]"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Afterward, we will compare the pair (8, 3)."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["[7, ",(0,t.jsx)(s.strong,{children:"8, 3"}),", 2, 4, 1, ",(0,t.jsx)(s.strong,{children:"8, 10, 14, 16"}),"]"]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["Since 8 is greater than 3, ",(0,t.jsx)(s.strong,{children:"there will be a swap"}),", and these ",(0,t.jsx)(s.strong,{children:"pair-wise swaps"})," will continue to push 8 to its final position."]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["[7, 3, 2, 4, 1, ",(0,t.jsx)(s.strong,{children:"8, 8, 10, 14, 16"}),"]"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Now we begin again with the pair (7, 3) and push 7 to its final position. The detailed pair-wise swapping is not shown below, but the final arrangement at the end of this iteration will be as the one below."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["[3, 2, 4, 1, ",(0,t.jsx)(s.strong,{children:"7, 8, 8, 10, 14, 16"}),"]"]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["At this point, we will start a new iteration by comparing the pair (3, 2). Since 3 is greater than 2, there will be a swap. The next comparison will fall on the pair (3, 4), i.e. [2, ",(0,t.jsx)(s.strong,{children:"3, 4"}),", 1, 7, 8, 8, 10, 14, 16]. But since 3 is less than 4, there is no swap happening. And the rest of the comparison will push 4 to its final position."]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["[2, 3, 1, ",(0,t.jsx)(s.strong,{children:"4, 7, 8, 8, 10, 14, 16"}),"]"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"A similar situation occurs. There is no swap between (2, 3), but then it will swap (3, 1)."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["[2, 1, ",(0,t.jsx)(s.strong,{children:"3, 4, 7, 8, 8, 10, 14, 16"}),"]"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"In the last iteration, it wil swap (2, 1)."}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["[",(0,t.jsx)(s.strong,{children:"1, 2, 3, 4, 7, 8, 8, 10, 14, 16"}),"]"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Here's an animated example from Wikipedia,sorting a different sequence of numbers."}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{src:"https://upload.wikimedia.org/wikipedia/commons/c/c8/Bubble-sort-example-300px.gif",alt:"Animation for Bubble Sort"})}),"\n",(0,t.jsx)(s.h3,{id:"design-of-algorithm",children:"Design of Algorithm"}),"\n",(0,t.jsx)(s.p,{children:"After we work on the test cases, we can now write down the steps in pseudocode. Several things to note from the above test cases:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["There are two kind of iterations:","\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:["the ",(0,t.jsx)(s.em,{children:"inner"})," iteration is when we compare the pairs (a, b) and do a swap if ",(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsxs)(s.mrow,{children:[(0,t.jsx)(s.mi,{children:"a"}),(0,t.jsx)(s.mo,{children:">"}),(0,t.jsx)(s.mi,{children:"b"})]}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"a>b"})]})})}),(0,t.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"0.5782em",verticalAlign:"-0.0391em"}}),(0,t.jsx)(s.span,{className:"mord mathnormal",children:"a"}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.jsx)(s.span,{className:"mrel",children:">"}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"0.6944em"}}),(0,t.jsx)(s.span,{className:"mord mathnormal",children:"b"})]})]})]}),","]}),"\n",(0,t.jsxs)(s.li,{children:["the ",(0,t.jsx)(s.em,{children:"outer"})," iteration is when repeat the inner iteration pass starting from the first pair again."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["The number of ",(0,t.jsx)(s.em,{children:"inner"})," iteration is the ",(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsxs)(s.mrow,{children:[(0,t.jsx)(s.mi,{children:"n"}),(0,t.jsx)(s.mo,{children:"\u2212"}),(0,t.jsx)(s.mn,{children:"1"})]}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"n-1"})]})})}),(0,t.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"0.6667em",verticalAlign:"-0.0833em"}}),(0,t.jsx)(s.span,{className:"mord mathnormal",children:"n"}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,t.jsx)(s.span,{className:"mbin",children:"\u2212"}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"0.6444em"}}),(0,t.jsx)(s.span,{className:"mord",children:"1"})]})]})]}),", where ",(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsx)(s.mrow,{children:(0,t.jsx)(s.mi,{children:"n"})}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"n"})]})})}),(0,t.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"0.4306em"}}),(0,t.jsx)(s.span,{className:"mord mathnormal",children:"n"})]})})]})," is the number of elements in the list. This is because the inner iteration compares a pair. So if there is ",(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsx)(s.mrow,{children:(0,t.jsx)(s.mi,{children:"n"})}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"n"})]})})}),(0,t.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"0.4306em"}}),(0,t.jsx)(s.span,{className:"mord mathnormal",children:"n"})]})})]})," elements, there will be ",(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsxs)(s.mrow,{children:[(0,t.jsx)(s.mi,{children:"n"}),(0,t.jsx)(s.mo,{children:"\u2212"}),(0,t.jsx)(s.mn,{children:"1"})]}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"n-1"})]})})}),(0,t.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"0.6667em",verticalAlign:"-0.0833em"}}),(0,t.jsx)(s.span,{className:"mord mathnormal",children:"n"}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,t.jsx)(s.span,{className:"mbin",children:"\u2212"}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"0.6444em"}}),(0,t.jsx)(s.span,{className:"mord",children:"1"})]})]})]})," pairs to compare."]}),"\n",(0,t.jsxs)(s.li,{children:["The number of ",(0,t.jsx)(s.em,{children:"outer"})," iteration is also ",(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsxs)(s.mrow,{children:[(0,t.jsx)(s.mi,{children:"n"}),(0,t.jsx)(s.mo,{children:"\u2212"}),(0,t.jsx)(s.mn,{children:"1"})]}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"n-1"})]})})}),(0,t.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"0.6667em",verticalAlign:"-0.0833em"}}),(0,t.jsx)(s.span,{className:"mord mathnormal",children:"n"}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,t.jsx)(s.span,{className:"mbin",children:"\u2212"}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"0.6444em"}}),(0,t.jsx)(s.span,{className:"mord",children:"1"})]})]})]}),". You can refer back to the case above that there were 9 ",(0,t.jsx)(s.em,{children:"outer"})," iterations for the 10 elements."]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["Let's write down what we did in the above case. Note that in this algorithm we chose not to return the sorted list as a new object, but rather ",(0,t.jsx)(s.em,{children:"sort the list in place"}),". This means that the input list is modified and the sorted list exists in the object pointed by the input list. The advantage of this is that the list need not be duplicated and the memory is saved as we deal only with one list."]}),"\n",(0,t.jsx)(a.A,{title:"Show Pseudocode",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"Bubble Sort\nVersion: 1\nInput: array\nOutput: None, sort in place\nSteps:\n1. n = length of array\n2. For outer_index from 1 to n-1, do:\n    2.1 For inner_index from 1 to n-1, do:\n        2.1.1 first_number = array[inner_index - 1]\n        2.1.2 second_number = array[inner_index]\n        2.1.3 if first_number > second_number, do:\n            2.1.3.1 swap(first_number, second_number)\n"})})}),"\n",(0,t.jsx)(s.h2,{id:"optimised-bubble-sort",children:"Optimised Bubble Sort"}),"\n",(0,t.jsx)(s.h3,{id:"bubble-sort-v2",children:"Bubble Sort v2"}),"\n",(0,t.jsx)(s.p,{children:"We can optimized bubble sort algorithm by noting the following:"}),"\n",(0,t.jsxs)(s.blockquote,{children:["\n",(0,t.jsxs)(s.p,{children:["If the sequence is already in order, we can reduce the next ",(0,t.jsx)(s.em,{children:"outer"})," iteration."]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"For example, if the input is"}),"\n",(0,t.jsx)(s.p,{children:"[16, 1, 2, 3, 4, 5]"}),"\n",(0,t.jsx)(s.p,{children:"The first iteration will push 16 to the last position."}),"\n",(0,t.jsxs)(s.p,{children:["[1, 2, 3, 4, 5, ",(0,t.jsx)(s.strong,{children:"16"}),"]"]}),"\n",(0,t.jsxs)(s.p,{children:["In the second iteration, no swap is made since all the numbers are already in the correct order. However, with the above algorithm, the outer iteration will still repeat for ",(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsxs)(s.mrow,{children:[(0,t.jsx)(s.mi,{children:"n"}),(0,t.jsx)(s.mo,{children:"\u2212"}),(0,t.jsx)(s.mn,{children:"1"})]}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"n-1"})]})})}),(0,t.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"0.6667em",verticalAlign:"-0.0833em"}}),(0,t.jsx)(s.span,{className:"mord mathnormal",children:"n"}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,t.jsx)(s.span,{className:"mbin",children:"\u2212"}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"0.6444em"}}),(0,t.jsx)(s.span,{className:"mord",children:"1"})]})]})]})," times. We can conclude therefore that if no swap is made in one pass of ",(0,t.jsx)(s.em,{children:"outer"})," iteration, the sequence is already in order, and we can stop the ",(0,t.jsx)(s.em,{children:"outer"})," iteration. We can then modify the pseudocode as follows."]}),"\n",(0,t.jsx)(a.A,{title:"Show Pseudocode",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"Bubble Sort\nVersion: 2\nInput: array\nOutput: None, sort in place\nSteps:\n1. n = length of array\n2. swapped = True\n3. As long as swapped is True, do:\n  3.1 swapped = False\n  3.2 For inner_index from 1 to n-1, do:\n      3.2.1 first_number = array[inner_index - 1]\n      3.2.2 second_number = array[inner_index]\n      3.2.3 if first_number > second_number, do:\n          3.2.3.1 swap(first_number, second_number)\n          3.2.3.2 swapped = True\n"})})}),"\n",(0,t.jsx)(s.h3,{id:"comparison-with-v1",children:"Comparison with v1"}),"\n",(0,t.jsxs)(s.p,{children:["Let's compare this with version 1. Notice that the number of ",(0,t.jsx)(s.em,{children:"outer"})," iteration is much less in version two as compared to version one. The n-th pass of the ",(0,t.jsx)(s.em,{children:"outer"})," iteration will place the n-th largest number to its final position. For example, in the given input below,"]}),"\n",(0,t.jsx)(s.p,{children:"[16, 14, 10, 8, 7, 8, 3, 2, 4, 1]"}),"\n",(0,t.jsxs)(s.p,{children:["In the 1-st ",(0,t.jsx)(s.em,{children:"outer"})," pass, the 1-st largest number (i.e. 16) will be placed to its final position."]}),"\n",(0,t.jsxs)(s.p,{children:["[14, 10, 8, 7, 8, 3, 2, 4, 1, ",(0,t.jsx)(s.strong,{children:"16"}),"]"]}),"\n",(0,t.jsxs)(s.p,{children:["This means that we can reduce the number of ",(0,t.jsx)(s.em,{children:"inner"})," iteration. Instead of comparing ",(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsxs)(s.mrow,{children:[(0,t.jsx)(s.mi,{children:"n"}),(0,t.jsx)(s.mo,{children:"\u2212"}),(0,t.jsx)(s.mn,{children:"1"})]}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"n-1"})]})})}),(0,t.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"0.6667em",verticalAlign:"-0.0833em"}}),(0,t.jsx)(s.span,{className:"mord mathnormal",children:"n"}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,t.jsx)(s.span,{className:"mbin",children:"\u2212"}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"0.6444em"}}),(0,t.jsx)(s.span,{className:"mord",children:"1"})]})]})]})," pairs for each ",(0,t.jsx)(s.em,{children:"inner"})," iteration, we can reduce the number of ",(0,t.jsx)(s.em,{children:"inner"})," iteration after each pass of ",(0,t.jsx)(s.em,{children:"outer"})," iteration is done. For example, in the above example, we have 10 elements. In the first ",(0,t.jsx)(s.em,{children:"outer"})," iteration, we have 9 comparisons in the ",(0,t.jsx)(s.em,{children:"inner"})," iteration. In the next ",(0,t.jsx)(s.em,{children:"outer"})," iteration, we can simply do 8 comparisons instead of 9. In the third ",(0,t.jsx)(s.em,{children:"outer"})," iteration, we can do just 7 comparisons instead of 9, and so on."]}),"\n",(0,t.jsx)(s.h3,{id:"bubble-sort-v3",children:"Bubble Sort v3"}),"\n",(0,t.jsx)(s.p,{children:"We can further optimise and re-write the pseudocode as follows."}),"\n",(0,t.jsx)(a.A,{title:"Show Pseudocode",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"Bubble Sort\nVersion: 3\nInput: array\nOutput: None, sort in place\nSteps:\n1. n = length of array\n2. swapped = True\n3. As long as swapped is True, do:\n  3.1 swapped = False\n  3.2 For inner_index from 1 to n-1, do:\n      3.2.1 first_number = array[inner_index - 1]\n      3.2.2 second_number = array[inner_index]\n      3.2.3 if first_number > second_number, do:\n          3.2.3.1 swap(first_number, second_number)\n          3.2.3.2 swapped = True\n  3.3 n = n -1\n"})})}),"\n",(0,t.jsxs)(s.p,{children:["The additional step is 3.3 which is to reduce the number of ",(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsx)(s.mrow,{children:(0,t.jsx)(s.mi,{children:"n"})}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"n"})]})})}),(0,t.jsx)(s.span,{className:"katex-html","aria-hidden":"true",children:(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"0.4306em"}}),(0,t.jsx)(s.span,{className:"mord mathnormal",children:"n"})]})})]}),". With this, Step 3.2 will decrease by one in the next ",(0,t.jsx)(s.em,{children:"outer"})," iteration."]}),"\n",(0,t.jsx)(s.h3,{id:"bubble-sort-v4",children:"Bubble Sort v4"}),"\n",(0,t.jsxs)(s.p,{children:["It can happen that more than one elements are place in their final positions in one ",(0,t.jsx)(s.em,{children:"outer"})," iteration pass. This means that we don't have to decrease the number of ",(0,t.jsx)(s.em,{children:"inner"})," iteration by 1 on each step of ",(0,t.jsx)(s.em,{children:"outer"})," iteration. We can record down, at which position was the last swap, and on the next ",(0,t.jsx)(s.em,{children:"outer"})," iteration, we can do comparison up to that last position. To illustrate this, consider the following input."]}),"\n",(0,t.jsx)(s.p,{children:"[1000, 1, 4, 7, 3, 10, 100]"}),"\n",(0,t.jsxs)(s.p,{children:["In the first ",(0,t.jsx)(s.em,{children:"outer"})," pass, we push 1000 to its final position. This means we have ",(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsxs)(s.mrow,{children:[(0,t.jsx)(s.mi,{children:"n"}),(0,t.jsx)(s.mo,{children:"\u2212"}),(0,t.jsx)(s.mn,{children:"1"})]}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"n-1"})]})})}),(0,t.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"0.6667em",verticalAlign:"-0.0833em"}}),(0,t.jsx)(s.span,{className:"mord mathnormal",children:"n"}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}}),(0,t.jsx)(s.span,{className:"mbin",children:"\u2212"}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2222em"}})]}),(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"0.6444em"}}),(0,t.jsx)(s.span,{className:"mord",children:"1"})]})]})]})," comparisons and swaps."]}),"\n",(0,t.jsx)(s.p,{children:"[1, 4, 7, 3, 10, 100, 1000]"}),"\n",(0,t.jsxs)(s.p,{children:["In the second ",(0,t.jsx)(s.em,{children:"outer"})," pass, we first compare the pair (1, 4), but no swap happens. Similarly with (4, 7). Now, when comparing the pair (7, 3), we do a swap to result in."]}),"\n",(0,t.jsxs)(s.p,{children:["[1, 4, ",(0,t.jsx)(s.strong,{children:"3, 7"}),", 10, 100, 1000]"]}),"\n",(0,t.jsxs)(s.p,{children:["When we have a swap, we will record down our position. In this case, it is at the position of the ",(0,t.jsx)(s.strong,{children:"4th element in the list, or index 3"})," (if our index starts from 0). Subsequently, we compare (7, 10), but no swap happens. Similarly with (10, 100). We stop at this point because the second iteration only compares up to the second last element in the above algorithm."]}),"\n",(0,t.jsxs)(s.p,{children:["Now, if we follow the previous algorithm, the next ",(0,t.jsx)(s.em,{children:"outer"})," pass will compare up to the third last element, which is 10. However, we note that the last five elements are already ordered. We know this because in the last pass, the last swap happens at (7, 3) to (3, 7) pair. In this case, we just need to run our ",(0,t.jsx)(s.em,{children:"inner"})," iteration up to this position, i.e. ",(0,t.jsx)(s.strong,{children:"4th position, or index 3"}),"."]}),"\n",(0,t.jsx)(s.p,{children:"We can modify our pseudocode as follows."}),"\n",(0,t.jsx)(a.A,{title:"Show Pseudocode",children:(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"Bubble Sort\nVersion: 4\nInput: array\nOutput: None, sort in place\nSteps:\n1. n = length of array\n2. swapped = True\n3. As long as swapped is True, do:\n  3.1 swapped = False\n  3.2 new_n = 0\n  3.3 For inner_index from 1 to n-1, do:\n      3.3.1 first_number = array[inner_index - 1]\n      3.3.2 second_number = array[inner_index]\n      3.3.3 if first_number > second_number, do:\n          3.3.3.1 swap(first_number, second_number)\n          3.3.3.2 swapped = True\n          3.3.3.3 new_n = inner_index\n  3.4 n = new_n\n"})})}),"\n",(0,t.jsxs)(s.p,{children:["In the above pseudocode, we set record down the position of the element on the last swap (step 3.3.3.3), and we assign this as the new ending position for the next ",(0,t.jsx)(s.em,{children:"outer"})," pass (step 3.4)."]})]})}function p(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}}}]);