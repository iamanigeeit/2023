"use strict";(self.webpackChunksite_docusaurus_template=self.webpackChunksite_docusaurus_template||[]).push([[3028],{17486:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>x,frontMatter:()=>h,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"graph-traversal/basics-graph","title":"Basics of Graph","description":"Graph theory is a mathematical discipline that studies the properties and relationships of graphs, which consist of nodes (vertices) connected by edges, enabling analysis of various real-world systems and phenomena.","source":"@site/docs/06-graph-traversal/basics-graph.md","sourceDirName":"06-graph-traversal","slug":"/graph-traversal/basics-graph","permalink":"/2023/notes/graph-traversal/basics-graph","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Week 6: Graph Traversal","permalink":"/2023/notes/category/week-6-graph-traversal"},"next":{"title":"Breadth First Search","permalink":"/2023/notes/graph-traversal/bfs"}}');var i=t(74848),r=t(28453),a=(t(28548),t(13358),t(73627)),o=t(53833);const h={sidebar_position:1},d="Basics of Graph",c={},l=[{value:"Goals",id:"goals",level:3},{value:"What is a Graph?",id:"what-is-a-graph",level:2},{value:"How to Represent a Graph in a Code?",id:"how-to-represent-a-graph-in-a-code",level:2},{value:"Adjacency Matrix",id:"adjacency-matrix",level:3},{value:"Adjacency List",id:"adjacency-list",level:3},{value:"Using Object Oriented Programming",id:"using-object-oriented-programming",level:3}];function p(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"basics-of-graph",children:"Basics of Graph"})}),"\n",(0,i.jsx)(n.p,{children:"Graph theory is a mathematical discipline that studies the properties and relationships of graphs, which consist of nodes (vertices) connected by edges, enabling analysis of various real-world systems and phenomena."}),"\n",(0,i.jsx)(n.p,{children:"Graph theory is also a fundamental aspect of Artificial Intelligence (AI) that enables the representation and analysis of complex relationships and structures. In AI, graphs are used to model networks, where nodes (vertices) represent entities and edges represent connections or interactions between these entities. This allows for the visualization and manipulation of data in a way that reveals patterns, optimizes processes, and solves problems. For instance, in social network analysis, graphs can represent individuals and their connections, helping to identify influential nodes and community structures. In computer vision, graphs can model the relationships between different parts of an image, aiding in object recognition and scene understanding. Additionally, graphs are used in natural language processing to represent the syntactic structure of sentences, facilitating tasks such as parsing and semantic analysis. Other applications include pathfinding algorithms in robotics, where graphs help in navigating environments, and recommendation systems, where graphs model user-item interactions to suggest relevant content. Overall, graph theory provides a versatile and powerful toolset for AI, enabling the efficient handling and interpretation of complex data."}),"\n",(0,i.jsx)(n.p,{children:"Applications of Graph in AI:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Social Network Analysis"}),": Identifying influential nodes and community structures."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Computer Vision"}),": Modeling relationships between parts of an image for object recognition and scene understanding."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Natural Language Processing"}),": Representing syntactic structures of sentences for parsing and semantic analysis."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Robotics"}),": Pathfinding algorithms for navigating environments."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Recommendation Systems"}),": Modeling user-item interactions to suggest relevant content."]}),"\n"]}),"\n",(0,i.jsx)(o.A,{}),"\n",(0,i.jsx)(n.h3,{id:"goals",children:"Goals"}),"\n",(0,i.jsx)(n.p,{children:"By the end of this lesson, you should be able to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Define ",(0,i.jsx)(n.strong,{children:"graph"}),", ",(0,i.jsx)(n.strong,{children:"vertices"}),", ",(0,i.jsx)(n.strong,{children:"edges"})," and ",(0,i.jsx)(n.strong,{children:"weights"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Use Dictionary and OOP to ",(0,i.jsx)(n.strong,{children:"represent graph"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Represent graphs using ",(0,i.jsx)(n.strong,{children:"adjacency-list"})," representation or ",(0,i.jsx)(n.strong,{children:"adjacency-matrix"})," representation."]}),"\n",(0,i.jsxs)(n.li,{children:["Differentiate ",(0,i.jsx)(n.strong,{children:"directed"})," and ",(0,i.jsx)(n.strong,{children:"undirected"})," graphs."]}),"\n",(0,i.jsxs)(n.li,{children:["Define ",(0,i.jsx)(n.strong,{children:"paths"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Create a ",(0,i.jsx)(n.code,{children:"Vertex"})," class and a ",(0,i.jsx)(n.code,{children:"Graph"})," class."]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{title:"Keywords",type:"keyword",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"graph"}),",",(0,i.jsx)(n.code,{children:"adjacency matrix"}),",",(0,i.jsx)(n.code,{children:"adjacency list"}),",",(0,i.jsx)(n.code,{children:"vertex"}),",",(0,i.jsx)(n.code,{children:"neighbours"}),",",(0,i.jsx)(n.code,{children:"edge"}),",",(0,i.jsx)(n.code,{children:"weight"}),",",(0,i.jsx)(n.code,{children:"directional edge"}),", ",(0,i.jsx)(n.code,{children:"undirectional edge"}),", ",(0,i.jsx)(n.code,{children:"path"})]})}),"\n",(0,i.jsx)(n.h2,{id:"what-is-a-graph",children:"What is a Graph?"}),"\n",(0,i.jsx)(n.p,{children:"In previous sections, we have worked with various algorithms and data. For example, we did sorting algorithm in a sequence of data of a list or array-like type. List and array is one kind of data where the item has relationship only with its previous and next item in a sequence. Stack and Queues are another kind of data structures. Even with these two, each item is related only in linear fashion, either with the next one at the top of the Stack or with the next in the sequence of the Queue. A Graph allows more relationship to be represented between each item. Two examples of graph data structures are shown below."}),"\n",(0,i.jsx)(a.A,{path:t(85864).A,widthPercentage:"30%"}),"\n",(0,i.jsx)(a.A,{path:"https://upload.wikimedia.org/wikipedia/en/thumb/a/a1/Control-flow-graph-ex.svg/753px-Control-flow-graph-ex.svg.png",widthPercentage:"50%"}),"\n",(0,i.jsx)(n.p,{children:"In the first example, the graph represent a kind of connection between places like in a map. With this kind of data, we can find a path from one place to another place or finding the shortest distance between two places. In the second example, the graph represent the control flow of a computer program. Compiler can use this information to optimize the code. Both are a Graph data type that represent different things. We can define a few things when dealing with a Graph."}),"\n",(0,i.jsx)(a.A,{path:t(32038).A,widthPercentage:"50%"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Vertex"}),': A vertex is a node that is connected by edges in a graph. A vertex can have a name which is also called its "key". In the above example, V1, V2, V3, etc are the vertices.']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Edge"}),": An edge in the figure above is represented by the lines connecting two vertices. An edge can be uni-directinal or bi-directional. The direction is usually represented by the arrow. Bi-directional edges usually do not have arrow heads. In the above examples, E1, E2, E3, etc are edges. Note that E1 and E6 are bi-directional while the rest are uni-directional."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"how-to-represent-a-graph-in-a-code",children:"How to Represent a Graph in a Code?"}),"\n",(0,i.jsx)(n.p,{children:"In the previous section we show some examples how real-world data like train stations or even a computer code can be represented as a graph. In this section we would like to discuss how such graphs are written in a computer code. The main information needed by the computer is the following:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"what are the vertices"}),"\n",(0,i.jsx)(n.li,{children:"what are the edges"}),"\n",(0,i.jsx)(n.li,{children:"how the vertices are connected by the edges"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"adjacency-matrix",children:"Adjacency Matrix"}),"\n",(0,i.jsxs)(n.p,{children:["One way to represent this is to use an ",(0,i.jsx)(n.strong,{children:"Adjencency Matrix"}),". In this matrix, if there is a connection between one vertex to another, the cell between that row and column is represented by some number, e.g. 1 instead of 0 as when there is no connection. For example, the last graph above can be written in the following matrix:"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{}),(0,i.jsx)(n.th,{children:"V1"}),(0,i.jsx)(n.th,{children:"V2"}),(0,i.jsx)(n.th,{children:"V3"}),(0,i.jsx)(n.th,{children:"V4"}),(0,i.jsx)(n.th,{children:"V5"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"V1"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"1"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"V2"}),(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"V3"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"V4"}),(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"V5"}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{}),(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"Note the following:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The connection from vertex ",(0,i.jsx)(n.em,{children:"u"})," to vertex ",(0,i.jsx)(n.em,{children:"v"})," is represented by a non-zero value at row ",(0,i.jsx)(n.em,{children:"u"})," and column ",(0,i.jsx)(n.em,{children:"v"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"For example, there is an edge from V1 to V2, so there is a 1 entry at row V1 and column V2. Similarly, there is an edge from V4 to V3 and this is represented by a 1 at row V4 and column V3."}),"\n",(0,i.jsx)(n.li,{children:"If the edge is bi-directional, we have a symmetry in the entry. For example, V1 is connected to V2 with a bi-directional edge. We see a non-zero entry at row V1 and column V2 as well as row V2 and column V1. Similarly between V2 and V3."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The advantage of this representation is that it is simple and intuitive. The only thing is that it may end up in a sparse matrix where most of the entry are zeros and only a few non-zero entry. So this is good when the number of edges is large such as when every vertex is connected to every other vertices."}),"\n",(0,i.jsx)(n.h3,{id:"adjacency-list",children:"Adjacency List"}),"\n",(0,i.jsxs)(n.p,{children:["Another way to represent a graph is to use ",(0,i.jsx)(n.strong,{children:"adjacency list"}),". This is more suitable when the number of edges is not large. We can use a dictionary for this purpose:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"graph1 = {'V1': ['V2', 'V5'],\n          'V2': ['V1', 'V3', 'V4'],\n          'V3': ['V2'],\n          'V4': ['V1', 'V3'],\n          'V5': ['V4']}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Notice that the keys are all the vertices in the graph and the value of the dictionary is a list of all the adjacent vertices connected to that particular vertex. For example, vertex V1 is connected to two other vertices V2 and V5. In fact, since there is no particular sequence for the adjacent vertices, you need not use a list and can use a dictionary instead as in the following:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"graph1 = {'V1': {'V2': 1, 'V5': 1},\n          'V2': {'V1': 1, 'V3': 1, 'V4': 1},\n          'V3': {'V2': 1 },\n          'V4': {'V1': 1, 'V3': 1},\n          'V5': {'V4': 1}}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The value in the dictionary of the adjacent vertices are all 1 for this example, but they need not be. These values are called the ",(0,i.jsx)(n.strong,{children:"weights"})," or the ",(0,i.jsx)(n.strong,{children:"costs"}),". You can assign different weights. For example, in the graph for the MRT train, you can assign more cost to connection between Tampines Downtown Line to Pasir Ris or Simei East West Line if passanger has to go out from the MRT station from one line to the other line."]}),"\n",(0,i.jsx)(n.h3,{id:"using-object-oriented-programming",children:"Using Object Oriented Programming"}),"\n",(0,i.jsx)(n.p,{children:"You have learnt Object Oriented programming in the previous week. We can apply this programming concept to represent a graph. We can create two classes:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Vertex"})," class"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Graph"})," class"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"Vertex"})," class is similar to each entry in the dictionary. This class contains information on that particular vertex and who are the neighbouring or adjacent vertices connected this particular vertex. This class can also contains the weights of the connection between this vertex to its neighbours. The ",(0,i.jsx)(n.code,{children:"Graph"})," class, on the other hand, contains the list of all the vertices in the graph. Each of this vertex is of the type ",(0,i.jsx)(n.code,{children:"Vertex"}),". We can draw the UML diagram of these two classes as follows."]}),"\n",(0,i.jsx)(n.mermaid,{value:"classDiagram\n    Graph *-- Vertex"}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(n.p,{children:["The above UML diagram shows that a ",(0,i.jsx)(n.code,{children:"Graph"})," is composed of one or more ",(0,i.jsx)(n.code,{children:"Vertex"})," objects. This is another ",(0,i.jsx)(n.em,{children:"composition"})," relationship between two classes."]}),"\n",(0,i.jsx)(n.p,{children:"We can specify the attributes and methods for both classes as shown in the image below."}),"\n",(0,i.jsx)(n.mermaid,{value:"classDiagram\nclass Graph{\n    vertices\n    add_vertex(id)\n    get_vertex(id)\n    add_edge(start_id, end_id, weight)\n    get_neighbours(id)\n    get_num_vertices()\n}\nclass Vertex{\n    id\n    neighbours\n    add_neighbour(neighbour_vertex,weight)\n    get_neighbours()\n    get_weight(neighbour_vertex)\n}"}),"\n",(0,i.jsx)("br",{}),"\n",(0,i.jsxs)(n.p,{children:["The class ",(0,i.jsx)(n.code,{children:"Graph"})," has an attribute called ",(0,i.jsx)(n.code,{children:"vertices"}),". This attribute contains all the vertices in the graph where each vertex is of the type ",(0,i.jsx)(n.code,{children:"Vertex"}),". This class has several methods like how to create or retrieve a ",(0,i.jsx)(n.code,{children:"Vertex"})," object in the graph, add an edge between two vertices given their starting and ending ",(0,i.jsx)(n.code,{children:"id"}),"s. It may also have some other helper methods like to get all the neighbouring vertices of a given ",(0,i.jsx)(n.code,{children:"Vertex"})," or to get the number of vertices in the graph. You can design some other methods but these are some of the common operations we may want to perform with a graph."]}),"\n",(0,i.jsxs)(n.p,{children:["The class ",(0,i.jsx)(n.code,{children:"Vertex"})," has two attributes. The first one is the ",(0,i.jsx)(n.code,{children:"id"})," or the label for the ",(0,i.jsx)(n.code,{children:"Vertex"})," object and the second one is its neighbouring ",(0,i.jsx)(n.code,{children:"Vertex"})," objects. The class has some basic operation such as to add a neighbouring ",(0,i.jsx)(n.code,{children:"Vertex"})," to the current ",(0,i.jsx)(n.code,{children:"Vertex"})," object, or to get all the neighbouring ",(0,i.jsx)(n.code,{children:"Vertex"})," objects of the current Vertex. Lastly, it also has a method to get the weight of the edge to the neighbouring ",(0,i.jsx)(n.code,{children:"Vertex"})," object. Similarly, you can think of some other operations of a ",(0,i.jsx)(n.code,{children:"Vertex"})," object that may not be listed above."]})]})}function x(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},32038:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/Graphs-e656b2ae8fa3d87dcb0f8a291852e66b.png"},85864:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/MRT_Train-cd89106da00c927ac48ff3792b34ebc2.png"}}]);