"use strict";(self.webpackChunksite_docusaurus_template=self.webpackChunksite_docusaurus_template||[]).push([[6641],{56193:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>t,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"divide-conquer","title":"Week 3: Divide and Conquer","description":"Concept Map","source":"@site/learning-objectives/03-divide-conquer.md","sourceDirName":".","slug":"/divide-conquer","permalink":"/2023/learning-objectives/divide-conquer","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"sidebar_class_name":"hidden"},"sidebar":"tutorialSidebar","previous":{"title":"Week 2: Analysing Programs","permalink":"/2023/learning-objectives/analysing-programs"},"next":{"title":"Week 4: OOP","permalink":"/2023/learning-objectives/oop"}}');var i=r(74848),a=r(28453),o=(r(28548),r(13358),r(73627),r(53833));const t={sidebar_position:3,sidebar_class_name:"hidden"},c="Week 3: Divide and Conquer",d={},l=[{value:"Concept Map",id:"concept-map",level:3}];function p(e){const n={h1:"h1",h3:"h3",header:"header",img:"img",mermaid:"mermaid",p:"p",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"week-3-divide-and-conquer",children:"Week 3: Divide and Conquer"})}),"\n",(0,i.jsx)(o.A,{}),"\n",(0,i.jsx)(n.h3,{id:"concept-map",children:"Concept Map"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://www.dropbox.com/scl/fi/b3khm2mmgpbs6uf04ua03/DDW-Concept-Map-Week-3.drawio.png?rlkey=bv1zxg85e94ccpqa925bjupyg&raw=1",alt:""})}),"\n",(0,i.jsx)(n.mermaid,{value:"flowchart TD\n    A((Week 3<br>Recursion and Mergesort)) --\x3e |learns| ALGO((Algorithm))\n    ALGO --\x3e |learns| C((Complexity))\n    ALGO --\x3e |learns| R((Recursion))\n    ALGO --\x3e |learns| S((Sorting))\n    C  --\x3e |computes| CT((Computational Time))\n    R --\x3e |as compared to| ITER((Iteration))\n    R --\x3e |may use| HF((Helper Function))\n    R --\x3e |has| CS((cases))\n    S --\x3e |learns| MS((Mergesort))\n    CT --\x3e |draw| RT((Recursive Tree))\n    CT --\x3e |can be| EXP((exponential))\n    EXP --\x3e |for| TOH\n    CT --\x3e |can be| LL((Log Linear))\n    MS --\x3e |uses| R\n    CS --\x3e |uses| IE((if-else))\n    CS --\x3e |has| BASE((base))\n    CS --\x3e |has| REC((recursive))\n    RT --\x3e |for| TOH((Tower of Hanoi))\n    RT --\x3e |for| MS\n    LL --\x3e |for| MS\n    TOH --\x3e |uses| R\n    CT --\x3e |for| R"})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}}}]);