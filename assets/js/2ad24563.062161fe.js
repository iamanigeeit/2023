"use strict";(self.webpackChunksite_docusaurus_template=self.webpackChunksite_docusaurus_template||[]).push([[6150],{59899:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>j,frontMatter:()=>o,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"advanced/database","title":"SQLAlchemy","description":"SQLAlchemy is the Python SQL toolkit and Object Relational Mapper that gives application developers the full power and flexibility of SQL.","source":"@site/projects/advanced/database.md","sourceDirName":"advanced","slug":"/advanced/database","permalink":"/2023/projects/advanced/database","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Advanced","permalink":"/2023/projects/category/advanced"},"next":{"title":"Bootstrap","permalink":"/2023/projects/advanced/bootstrap"}}');var i=s(74848),a=s(28453),r=(s(28548),s(13358),s(73627)),l=s(53833);const o={sidebar_position:1},d="SQLAlchemy",c={},h=[{value:"Pre-Requisite",id:"pre-requisite",level:3},{value:"Config File and db Object",id:"config-file-and-db-object",level:2},{value:"Model, View, and Controller",id:"model-view-and-controller",level:2},{value:"Models",id:"models",level:2},{value:"Tables in models.py",id:"tables-in-modelspy",level:2},{value:"References",id:"references",level:3},{value:"Querying the Database",id:"querying-the-database",level:2},{value:"Users and Hall of Fame Page - Querying All Entries",id:"users-and-hall-of-fame-page---querying-all-entries",level:3},{value:"Question and Challenge Pages - Adding Entry into Database",id:"question-and-challenge-pages---adding-entry-into-database",level:3},{value:"References",id:"references-1",level:3}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"sqlalchemy",children:"SQLAlchemy"})}),"\n",(0,i.jsx)(n.p,{children:"SQLAlchemy is the Python SQL toolkit and Object Relational Mapper that gives application developers the full power and flexibility of SQL."}),"\n",(0,i.jsx)(l.A,{}),"\n",(0,i.jsx)(n.h3,{id:"pre-requisite",children:"Pre-Requisite"}),"\n",(0,i.jsx)(n.p,{children:"This notes will explain some of the codes in mini project 2 that interacts with the database using SQLAlchemy and Flask. However, it is useful that you go through these two tutorials:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-iii-web-forms",children:"The Flask Mega-Tutorial Part III: Web Forms"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-iv-database",children:"Flask Mega Tutorial Part IV: Database"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"We will not explain the explanation that is already written in that tutorial."}),"\n",(0,i.jsx)(n.h2,{id:"config-file-and-db-object",children:"Config File and db Object"}),"\n",(0,i.jsxs)(n.p,{children:["One change from the previous mini project is the present of ",(0,i.jsx)(n.code,{children:"config.py"})," in the root folder."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"import os\nbasedir = os.path.abspath(os.path.dirname(__file__))\n\nclass Config:\n\tSECRET_KEY = os.environ.get('SECRET_KEY') or 'very-secret-key'\n\tSQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or\\\n\t\t'sqlite:///' + os.path.join(basedir, 'app.db')\n\tSQLALCHEMY_TRACK_MODIFICATIONS = False\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This configuration file is needed by SQLAlchemy. The way it is written is as a class ",(0,i.jsx)(n.code,{children:"Config"}),". This class is imported inside ",(0,i.jsx)(n.code,{children:"app/__init__.py"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"from flask import Flask\nfrom config import Config\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_migrate import Migrate\n\napplication = Flask(__name__)\napplication.config.from_object(Config)\ndb = SQLAlchemy(application)\nmigrate = Migrate(application, db)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Notice that after we create the Flask application called ",(0,i.jsx)(n.code,{children:"application"}),", we call ",(0,i.jsx)(n.code,{children:"application.config.from_object(Config)"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["After the configuration, we can then create the ",(0,i.jsx)(n.code,{children:"SQLAlchemy"})," instance from ",(0,i.jsx)(n.code,{children:"application"})," and assign the name ",(0,i.jsx)(n.code,{children:"db"}),". We will use this ",(0,i.jsx)(n.code,{children:"db"})," object instance when we interact with the database in our Python code."]}),"\n",(0,i.jsx)(n.p,{children:"The last line is for convenient purpose as we use Flask-Migrate package to migrate the database whenever we change our model or table."}),"\n",(0,i.jsx)(n.h2,{id:"model-view-and-controller",children:"Model, View, and Controller"}),"\n",(0,i.jsxs)(n.p,{children:["Flask allows you to write your project using ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller",children:"Model-View-Controller (MVC)"})," software design pattern."]}),"\n",(0,i.jsx)(r.A,{path:"https://www.dropbox.com/s/1akl7cvoejwenpc/400px-MVC-Process.png?raw=1",widthPercentage:"30%"}),"\n",(0,i.jsx)(n.p,{children:"In using MVC design pattern, we separate our codes into three main components:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Model: is the main component of the pattern containing the data structures. The model should be independent of the user interface."}),"\n",(0,i.jsx)(n.li,{children:"View: is what the user sees and represents information to the user."}),"\n",(0,i.jsx)(n.li,{children:"Controller: is what manipulates the data based on the user interaction with the user interface."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"In our mini project, we have the following files where we write all these components:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"models.py"}),": contains our model which defines all the table in our SQL database."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"templates"})," folder: contains all the HTML files that provide the views to the users."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"routes.py"}),": contains the view controllers. Some view controllers interact with the model."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"models",children:"Models"}),"\n",(0,i.jsx)(n.p,{children:"Our database tables have the following relationships:"}),"\n",(0,i.jsx)(r.A,{path:"https://www.dropbox.com/s/6gb6nvaujsvevab/models_diagram.png?raw=1",widthPercentage:"50%"}),"\n",(0,i.jsxs)(n.p,{children:["You may want to look into this diagram and open ",(0,i.jsx)(n.code,{children:"models.py"})," at the same time."]}),"\n",(0,i.jsx)(n.h2,{id:"tables-in-modelspy",children:"Tables in models.py"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"User"})," class in ",(0,i.jsx)(n.code,{children:"models.py"})," has ",(0,i.jsx)(n.code,{children:"username"})," and ",(0,i.jsx)(n.code,{children:"password_hash"})," as its attributes. In our code, we name this table with a lowercase name ",(0,i.jsx)(n.code,{children:"user"})," table. The table ",(0,i.jsx)(n.code,{children:"user"})," has one-to-many relationship with the ",(0,i.jsx)(n.code,{children:"question"})," table. Every question has an author of that question."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class User(UserMixin, db.Model):\n\t__tablename__ = 'user'\n\tid = db.Column(db.Integer,\n                   primary_key=True)\n\tusername = db.Column(db.String(64),\n                         index=True,\n                         unique=True)\n\tpassword_hash = db.Column(db.String(128))\n\tquestions = db.relationship('Question',\n                                backref='from_user',\n                                lazy='dynamic')\n\tchallenges = db.relationship('Challenge',\n                                 secondary=association_table,\n                                 backref=db.backref('to_user'),\n                                 lazy='dynamic')\n\trecords = db.relationship('TimeRecord',\n                              backref=db.backref('user_challenge'),\n                              lazy='dynamic')\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"user"})," table has many-to-many relationship with the ",(0,i.jsx)(n.code,{children:"challenge"})," table through the ",(0,i.jsx)(n.code,{children:"association"})," table. This means that one user can have many challenges and one challenge can be sent to many users."]}),"\n",(0,i.jsxs)(n.p,{children:["When a user attempt one challenge, it will be recorded inside ",(0,i.jsx)(n.code,{children:"timerecord"})," table. Each entry in ",(0,i.jsx)(n.code,{children:"timerecord"})," table contains information of which challenge and who the user who submitted the answer. It also records the ",(0,i.jsx)(n.code,{children:"elapsed_time"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["When a user creates a question, it has to fill in the ",(0,i.jsx)(n.code,{children:"expression"})," field. The server then calculates the ",(0,i.jsx)(n.code,{children:"answer"})," using your ",(0,i.jsx)(n.code,{children:"EvaluateExpression"})," class which is part of your Exercise 2. Moreover, a user chooses another users to create a challenge for them and so it creates one entry in the ",(0,i.jsx)(n.code,{children:"challenge"})," table. This means that ",(0,i.jsx)(n.code,{children:"question"})," table and ",(0,i.jsx)(n.code,{children:"challenge"})," table has a one-to-one relationship."]}),"\n",(0,i.jsxs)(n.p,{children:["For one challenge, different users may attempt to answer and creates different ",(0,i.jsx)(n.code,{children:"timerecord"})," entries. The same user can attempt it several times as well. This means that the ",(0,i.jsx)(n.code,{children:"challenge"})," table has a one-to-many relationship with the ",(0,i.jsx)(n.code,{children:"timerecord"})," table since one challenge can have many records for the submissions."]}),"\n",(0,i.jsxs)(n.p,{children:["See ",(0,i.jsx)(n.code,{children:"models.py"})," and refer to the following documentations in the References to understand the rest of the codes."]}),"\n",(0,i.jsx)(n.h3,{id:"references",children:"References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.sqlalchemy.org/en/13/orm/basic_relationships.html",children:"SQLAlchemy Basic Relationship"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-iv-database",children:"The Flask Mega-Tutorial Part IV: Database"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"querying-the-database",children:"Querying the Database"}),"\n",(0,i.jsxs)(n.p,{children:["We will explain how we use the ",(0,i.jsx)(n.code,{children:"db"})," object inside ",(0,i.jsx)(n.code,{children:"app/routes.py"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"users-and-hall-of-fame-page---querying-all-entries",children:"Users and Hall of Fame Page - Querying All Entries"}),"\n",(0,i.jsxs)(n.p,{children:["The controller for the Users page is defined inside ",(0,i.jsx)(n.code,{children:"users()"})," function in ",(0,i.jsx)(n.code,{children:"routes.py"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def users():\n\tusers = User.query.all()\n\tmergesort(users, lambda item: item.username)\n\tusernames = [u.username for u in users]\n\treturn render_template('users.html', title='Users',\n\t\t\t\t\t\t\tusers=usernames)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The first line uses the class ",(0,i.jsx)(n.code,{children:"User"})," defined in ",(0,i.jsx)(n.code,{children:"models.py"}),". ",(0,i.jsx)(n.code,{children:"User"})," is an instance of ",(0,i.jsx)(n.code,{children:"db.Model"})," which has a ",(0,i.jsx)(n.code,{children:"query"})," object as its attribute. This ",(0,i.jsx)(n.code,{children:"query"})," object has a method ",(0,i.jsx)(n.code,{children:"all()"}),". What this line does is to query the ",(0,i.jsx)(n.code,{children:"user"})," table and retrieve all its entries."]}),"\n",(0,i.jsxs)(n.li,{children:["In the second and third line, we actually use the ",(0,i.jsx)(n.code,{children:"username"})," attribute of the ",(0,i.jsx)(n.code,{children:"User"})," object. Recall in ",(0,i.jsx)(n.code,{children:"models.py"})," that ",(0,i.jsx)(n.code,{children:"username"})," is one of the attributes defined in the class ",(0,i.jsx)(n.code,{children:"User"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Similarly, we can see a similar code to query all entries in the Hall of Fame page. You can check the function ",(0,i.jsx)(n.code,{children:"halloffame()"})," inside ",(0,i.jsx)(n.code,{children:"routes.py"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def halloffame():\n\tchallenges = Challenge.query.all()\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The above line retrieves all the challenges in the ",(0,i.jsx)(n.code,{children:"challenge"})," table."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"question-and-challenge-pages---adding-entry-into-database",children:"Question and Challenge Pages - Adding Entry into Database"}),"\n",(0,i.jsx)(n.p,{children:"Let's go to the controller for the Question page. This allows user to create a question and store it into the database."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def questions():\n\tquestions = current_user.questions.all()\n    ...\n\tusers = User.query.all()\n\tuserlist = [(u.username, u.username) for u in users]\n    ...\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["In the first line, the variable ",(0,i.jsx)(n.code,{children:"current_user"})," contains the ",(0,i.jsx)(n.code,{children:"User"})," object which is logged into the page. If you refer to ",(0,i.jsx)(n.code,{children:"User"})," class definition in ",(0,i.jsx)(n.code,{children:"models.py"})," you will see a ",(0,i.jsx)(n.code,{children:"questions"})," field being defined. Accessing this attribute gives you a query object that allows you to access the ",(0,i.jsx)(n.code,{children:"question"})," table for that user. Since a ",(0,i.jsx)(n.code,{children:"query"})," object has a method ",(0,i.jsx)(n.code,{children:"all()"})," you can use it to get all the questions created by the current user."]}),"\n",(0,i.jsxs)(n.li,{children:["The second and third lines are similar to the Users page where we retrieve all the users and their usernames from the ",(0,i.jsx)(n.code,{children:"user"})," table."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"if form.validate_on_submit():\n\t\tquestion = Question(expression=form.expression.data)\n\t\tevalans = EvaluateExpression(form.expression.data)\n\t\tquestion.answer = evalans.evaluate()\n\t\tquestion.author = current_user.id\n\t\tchallenge = Challenge(question=question)\n\t\tusername_to = []\n\t\tfor name in form.assign_to.data:\n\t\t\tusername_to.append(User.query.filter_by(username=name).first())\n\n\t\tchallenge.to_user = username_to\n\t\tdb.session.add(question)\n\t\tdb.session.add(challenge)\n\t\tdb.session.commit()\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["When the user submit the question by clicking the submit button, the value of ",(0,i.jsx)(n.code,{children:"form.validate_on_submit()"})," is ",(0,i.jsx)(n.code,{children:"True"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Upon submission, we want to create a new entry into the ",(0,i.jsx)(n.code,{children:"question"})," table."]}),"\n",(0,i.jsxs)(n.li,{children:["To create a new entry, we first create a new object instance: ",(0,i.jsx)(n.code,{children:"question = Question(expression=form.expression.data)"})," where we initialize the ",(0,i.jsx)(n.code,{children:"expression"})," with the string entered by the user in the form."]}),"\n",(0,i.jsxs)(n.li,{children:["We then create the object instance for ",(0,i.jsx)(n.code,{children:"EvaluateExpression"})," so that we can call its ",(0,i.jsx)(n.code,{children:"evaluate()"})," method. This will give us the answer which we set here: ",(0,i.jsx)(n.code,{children:"question.answer = evalans.evaluate()"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["We also want to create another record in the ",(0,i.jsx)(n.code,{children:"challenge"})," table. Therefore, we create the instance: ",(0,i.jsx)(n.code,{children:"challenge = Challenge(question=question)"}),". We set the ",(0,i.jsx)(n.code,{children:"question"})," field in the ",(0,i.jsx)(n.code,{children:"challenge"})," table with the newly created ",(0,i.jsx)(n.code,{children:"question"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The next few lines reads the names chosen in the field where the challenge is to be sent to and retrieve the ",(0,i.jsx)(n.code,{children:"User"})," object based on the ",(0,i.jsx)(n.code,{children:"username"}),": ",(0,i.jsx)(n.code,{children:"User.query.filter_by(username=name).first()"}),". Note that the ",(0,i.jsx)(n.code,{children:"query"})," object has another method called ",(0,i.jsx)(n.code,{children:"filter_by()"})," which can be used to retrieve the records based on certain filter conditions. The ",(0,i.jsx)(n.code,{children:"first()"})," method returns the first ",(0,i.jsx)(n.code,{children:"User"})," object found by the query that matches the filter condition."]}),"\n",(0,i.jsxs)(n.li,{children:["To modify the database, we have to add a ",(0,i.jsx)(n.code,{children:"session"})," and ",(0,i.jsx)(n.code,{children:"commit()"})," them. This is shown in the last three lines where we add a new entry to the ",(0,i.jsx)(n.code,{children:"question"})," and ",(0,i.jsx)(n.code,{children:"challenge"})," table and call ",(0,i.jsx)(n.code,{children:"commit()"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"db.session.add(question)\ndb.session.add(challenge)\ndb.session.commit()\n"})}),"\n",(0,i.jsxs)(n.p,{children:["We can see similar things inside the Challenge page controller in ",(0,i.jsx)(n.code,{children:"challenge()"})," function inside ",(0,i.jsx)(n.code,{children:"routes.py"}),". When a user submit an anwer, the following code will be executed:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"\tif form.validate_on_submit():\n\t\trecord = TimeRecord()\n\t\trecord.elapsed_time = int(form.elapsed_time.data)\n\t\trecord.challenge_id = int(form.challenge_id.data)\n\t\trecord.user_id = current_user.id\n\t\tanswer = form.answer.data\n\t\tchallenge = Challenge.query.filter_by(id=form.challenge_id.data).first()\n\t\tif int(answer) == int(challenge.question.answer):\n\t\t\tdb.session.add(record)\n\t\t\tdb.session.commit()\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The first line creates a ",(0,i.jsx)(n.code,{children:"TimeRecord"})," object after a user submit an answer."]}),"\n",(0,i.jsxs)(n.li,{children:["The second and third lines initialize the ",(0,i.jsx)(n.code,{children:"elapsed_time"})," and ",(0,i.jsx)(n.code,{children:"challenge_id"})," attributes of the ",(0,i.jsx)(n.code,{children:"TimeRecord"})," object from the data in the submitted form. The next line initialize the ",(0,i.jsx)(n.code,{children:"user_id"})," attribute using the ",(0,i.jsx)(n.code,{children:"current_user"})," object's ",(0,i.jsx)(n.code,{children:"id"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["We then want to check if the answer is correct. So it retrieves the answer submitted by the user, i.e. ",(0,i.jsx)(n.code,{children:"answer = form.answer.data"}),", with the one from the database."]}),"\n",(0,i.jsxs)(n.li,{children:["We get the answer fro the database by first finding the entry in the ",(0,i.jsx)(n.code,{children:"challenge"})," table that matches the ",(0,i.jsx)(n.code,{children:"challenge_id"}),": ",(0,i.jsx)(n.code,{children:"Challenge.query.filter_by(id=form.challenge_id.data).first()"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Since every entry in ",(0,i.jsx)(n.code,{children:"challenge"})," id table is associated with an entry in the ",(0,i.jsx)(n.code,{children:"question"})," table, we can access the questions' answer using: ",(0,i.jsx)(n.code,{children:"challenge.question.answer"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The last two lines above add the ",(0,i.jsx)(n.code,{children:"TimeRecord"})," object into the database."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"references-1",children:"References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.sqlalchemy.org/en/13/orm/query.html",children:"Query API"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.sqlalchemy.org/en/13/orm/session_basics.html",children:"Session Basics"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-iii-web-forms",children:"The Flask Mega-Tutorial Part III: Web Forms"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-iv-database",children:"Flask MegaTutorial Part IV: Database"})}),"\n"]})]})}function j(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}}}]);